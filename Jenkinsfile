pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'task-manager-api'
        DOCKER_TAG = "${BUILD_NUMBER}"
        JAVA_HOME = '/usr/lib/jvm/java-21-openjdk-amd64'
        PATH = "/opt/maven/bin:${env.PATH}"
        JAR_FILE = 'task-manager-api-1.0.0.jar'
        APP_PORT = '8090'  // Using different port
    }
    
    stages {
        stage('Debug Port Usage') {
            steps {
                echo '=== Checking Port Usage ==='
                sh '''
                    echo "=== Current port usage ==="
                    netstat -tulpn | grep -E ':(8080|8090|8091|8092)' || echo "No conflicts on target ports"
                    
                    echo "=== Docker containers ==="
                    docker ps -a
                    
                    echo "=== Processes using port 8080 ==="
                    lsof -i :8080 || echo "Port 8080 is free"
                    
                    echo "=== Processes using port 8090 ==="
                    lsof -i :8090 || echo "Port 8090 is free"
                '''
            }
        }
        
        stage('Force Cleanup') {
            steps {
                echo '=== Force Cleanup All Docker Resources ==='
                sh '''
                    echo "Stopping ALL Docker containers..."
                    docker ps -q | xargs -r docker stop || true
                    
                    echo "Removing ALL Docker containers..."
                    docker ps -aq | xargs -r docker rm -f || true
                    
                    echo "Removing Docker networks..."
                    docker network ls -q --filter type=custom | xargs -r docker network rm || true
                    
                    echo "Cleaning Docker system..."
                    docker system prune -af --volumes || true
                    
                    echo "Waiting for cleanup to complete..."
                    sleep 10
                    
                    echo "=== Post-cleanup status ==="
                    docker ps -a
                    netstat -tulpn | grep -E ':(8080|8090)' || echo "‚úÖ Ports 8080 and 8090 are free"
                '''
            }
        }
        
        stage('Build & Test') {
            steps {
                echo '=== Building and Testing Application ==='
                sh '''
                    mvn clean compile
                    mvn test
                    mvn package -DskipTests
                    
                    if [ -f "target/${JAR_FILE}" ]; then
                        echo "‚úÖ JAR file created: target/${JAR_FILE}"
                        ls -la target/${JAR_FILE}
                    else
                        echo "‚ùå JAR file not found!"
                        exit 1
                    fi
                '''
                
                archiveArtifacts artifacts: "target/${env.JAR_FILE}", fingerprint: true
            }
        }
        
        stage('Docker Build') {
            steps {
                echo '=== Building Docker Image ==='
                sh '''
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    echo "‚úÖ Docker image built"
                    docker images | grep ${DOCKER_IMAGE} | head -2
                '''
            }
        }
        
        stage('Deploy on Different Port') {
            steps {
                echo "=== Deploying Application on Port ${env.APP_PORT} ==="
                sh '''
                    echo "Final port check before deployment..."
                    if lsof -i :${APP_PORT}; then
                        echo "‚ùå Port ${APP_PORT} is in use, trying to free it..."
                        lsof -ti :${APP_PORT} | xargs -r kill -9 || true
                        sleep 5
                    fi
                    
                    echo "Starting application on port ${APP_PORT}..."
                    docker run -d \\
                        --name task-manager-app \\
                        -p ${APP_PORT}:8080 \\
                        --restart unless-stopped \\
                        ${DOCKER_IMAGE}:latest
                    
                    echo "Waiting for application to start..."
                    sleep 30
                    
                    echo "Container status:"
                    docker ps | grep task-manager-app || echo "Container not found"
                    
                    echo "Container logs:"
                    docker logs task-manager-app --tail=10 || echo "No logs yet"
                '''
            }
        }
        
        stage('Health Check') {
            steps {
                echo "=== Health Check on Port ${env.APP_PORT} ==="
                script {
                    def healthCheckPassed = false
                    def maxAttempts = 12
                    
                    for (int i = 1; i <= maxAttempts; i++) {
                        try {
                            sh "curl -f http://localhost:${env.APP_PORT}/api/tasks/health"
                            echo "‚úÖ Health check passed on attempt ${i}!"
                            healthCheckPassed = true
                            break
                        } catch (Exception e) {
                            echo "‚ùå Health check attempt ${i}/${maxAttempts} failed"
                            if (i < maxAttempts) {
                                echo "Waiting 10 seconds..."
                                sleep 10
                                if (i % 4 == 0) {
                                    sh '''
                                        echo "=== Debug Info ==="
                                        docker ps | grep task-manager-app || echo "Container not running"
                                        docker logs task-manager-app --tail=15 || echo "No logs"
                                        netstat -tulpn | grep ${APP_PORT} || echo "Port ${APP_PORT} not in use"
                                    '''
                                }
                            }
                        }
                    }
                    
                    if (!healthCheckPassed) {
                        sh '''
                            echo "=== Final Debug Info ==="
                            docker ps -a
                            docker logs task-manager-app || echo "No logs available"
                            netstat -tulpn | grep ${APP_PORT} || echo "Port not in use"
                            
                            echo "=== Container inspection ==="
                            docker inspect task-manager-app || echo "Cannot inspect container"
                        '''
                        error "Application health check failed after ${maxAttempts} attempts"
                    }
                }
            }
        }
        
        stage('API Tests') {
            steps {
                echo "=== API Tests on Port ${env.APP_PORT} ==="
                sh '''
                    echo "=== Testing API Endpoints ==="
                    
                    echo "1. Health Check:"
                    curl -X GET http://localhost:${APP_PORT}/api/tasks/health
                    echo ""
                    
                    echo "2. Get all tasks:"
                    curl -X GET http://localhost:${APP_PORT}/api/tasks
                    echo ""
                    
                    echo "3. Create a test task:"
                    curl -X POST http://localhost:${APP_PORT}/api/tasks \\
                        -H "Content-Type: application/json" \\
                        -d '{"title":"DevOps Success","description":"Pipeline completed successfully!"}'
                    echo ""
                    
                    echo "4. Get all tasks again:"
                    curl -X GET http://localhost:${APP_PORT}/api/tasks
                    echo ""
                    
                    echo "5. Actuator health:"
                    curl -X GET http://localhost:${APP_PORT}/actuator/health
                    echo ""
                    
                    echo "‚úÖ All API tests passed!"
                '''
            }
        }
        
        stage('Performance Test') {
            steps {
                echo '=== Basic Performance Test ==='
                sh '''
                    echo "Running concurrent requests on port ${APP_PORT}..."
                    
                    for i in {1..10}; do
                        curl -s http://localhost:${APP_PORT}/api/tasks/health > /dev/null &
                    done
                    wait
                    echo "‚úÖ Concurrent health checks completed"
                    
                    for i in {1..5}; do
                        curl -s http://localhost:${APP_PORT}/api/tasks > /dev/null &
                    done
                    wait
                    echo "‚úÖ Concurrent API calls completed"
                '''
            }
        }
        
        stage('Final Status') {
            steps {
                echo '=== Final DevOps Pipeline Status ==='
                sh '''
                    echo "=== üéØ COMPLETE DEVOPS PIPELINE SUMMARY ==="
                    echo "‚úÖ Source Code: Compiled successfully"
                    echo "‚úÖ Unit Tests: All tests passed"
                    echo "‚úÖ Packaging: JAR file created (${JAR_FILE})"
                    echo "‚úÖ Docker Build: Image built (${DOCKER_IMAGE}:${DOCKER_TAG})"
                    echo "‚úÖ Deployment: Application deployed on port ${APP_PORT}"
                    echo "‚úÖ Health Check: Application is healthy and responding"
                    echo "‚úÖ API Testing: All endpoints tested and working"
                    echo "‚úÖ Performance: Basic load testing completed"
                    
                    echo ""
                    echo "=== üê≥ DEPLOYMENT STATUS ==="
                    docker ps --format "table {{.Names}}\\t{{.Status}}\\t{{.Ports}}"
                    
                    echo ""
                    echo "=== üåê APPLICATION ACCESS ==="
                    echo "üîó Main API: http://localhost:${APP_PORT}/api/tasks"
                    echo "üîó Health Check: http://localhost:${APP_PORT}/api/tasks/health"
                    echo "üîó Actuator: http://localhost:${APP_PORT}/actuator/health"
                    echo "üîó H2 Console: http://localhost:${APP_PORT}/h2-console"
                    
                    echo ""
                    echo "=== üìä APPLICATION METRICS ==="
                    TASK_COUNT=$(curl -s http://localhost:${APP_PORT}/api/tasks | jq length 2>/dev/null || echo "N/A")
                    echo "Current tasks in database: $TASK_COUNT"
                    echo "Application health: $(curl -s http://localhost:${APP_PORT}/api/tasks/health 2>/dev/null || echo 'Error')"
                    
                    echo ""
                    echo "=== üõ†Ô∏è DEVOPS TOOLS USED ==="
                    echo "‚Ä¢ Git: Source control"
                    echo "‚Ä¢ Maven: Build and dependency management"
                    echo "‚Ä¢ JUnit: Unit testing"
                    echo "‚Ä¢ Docker: Containerization"
                    echo "‚Ä¢ Jenkins: CI/CD pipeline"
                    echo "‚Ä¢ Spring Boot: Application framework"
                    echo "‚Ä¢ H2 Database: In-memory database"
                    
                    echo ""
                    echo "üéâ COMPLETE DEVOPS CI/CD PIPELINE SUCCESS! üéâ"
                '''
            }
        }
    }
    
    post {
        always {
            echo '=== Pipeline Cleanup ==='
            sh '''
                echo "Keeping application running for testing..."
                echo "Cleaning up old Docker images..."
                docker images ${DOCKER_IMAGE} --format "{{.Repository}}:{{.Tag}} {{.ID}}" | tail -n +4 | awk '{print $2}' | head -n -2 | xargs -r docker rmi || true
                echo "Cleanup completed"
            '''
        }
        success {
            echo """
            
            üéâüéâüéâ DEVOPS PIPELINE COMPLETE! üéâüéâüéâ
            
            ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
            ‚ïë     üöÄ FULL CI/CD PIPELINE SUCCESSFUL! üöÄ     ‚ïë
            ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
            
            üèóÔ∏è PIPELINE STAGES COMPLETED:
            ‚îú‚îÄ‚îÄ ‚úÖ Environment Setup & Port Management
            ‚îú‚îÄ‚îÄ ‚úÖ Source Code Compilation (Maven)
            ‚îú‚îÄ‚îÄ ‚úÖ Unit Testing (JUnit)
            ‚îú‚îÄ‚îÄ ‚úÖ Application Packaging (JAR)
            ‚îú‚îÄ‚îÄ ‚úÖ Docker Image Creation
            ‚îú‚îÄ‚îÄ ‚úÖ Container Deployment
            ‚îú‚îÄ‚îÄ ‚úÖ Health Monitoring
            ‚îú‚îÄ‚îÄ ‚úÖ API Integration Testing
            ‚îî‚îÄ‚îÄ ‚úÖ Performance Testing
            
            üåê YOUR APPLICATION IS LIVE:
            ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
            ‚îÇ üîó API: http://localhost:${env.APP_PORT}/api/tasks    ‚îÇ
            ‚îÇ üè• Health: /api/tasks/health               ‚îÇ
            ‚îÇ üìä Actuator: /actuator/health              ‚îÇ
            ‚îÇ üóÑÔ∏è Database: /h2-console                   ‚îÇ
            ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
            
            üéä Congratulations! Your DevOps pipeline is working! üéä
            
            üìù NEXT STEPS:
            ‚Ä¢ Test your API with Postman or curl
            ‚Ä¢ Monitor logs: docker logs task-manager-app
            ‚Ä¢ Add more features to your application
            ‚Ä¢ Set up monitoring with Prometheus/Grafana
            ‚Ä¢ Deploy to production environment
            """
        }
        failure {
            echo '''
            ‚ùå PIPELINE FAILED
            
            Debug the issue with these commands:
            ‚Ä¢ docker ps -a
            ‚Ä¢ docker logs task-manager-app
            ‚Ä¢ netstat -tulpn | grep 8090
            ‚Ä¢ lsof -i :8090
            '''
        }
    }
}
